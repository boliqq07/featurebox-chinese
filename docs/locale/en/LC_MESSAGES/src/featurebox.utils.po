# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, boliqq07
# This file is distributed under the same license as the featurebox package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: featurebox \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-04 23:47+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../src/featurebox.utils.rst:2
msgid "featurebox.utils package"
msgstr ""

#: ../../src/featurebox.utils.rst:10
msgid "Submodules"
msgstr ""

#: ../../src/featurebox.utils.rst:13
msgid "featurebox.utils.general module"
msgstr ""

#: ../../src/featurebox.utils.rst:21
msgid "featurebox.utils.predefined\\_typing module"
msgstr ""

#: featurebox.utils.predefined_typing:1 of
msgid "Define several typing for convenient use"
msgstr ""

#: ../../src/featurebox.utils.rst:29
msgid "featurebox.utils.quickmethod module"
msgstr ""

#: featurebox.utils.quickmethod:1 of
msgid "This is script, copy for using, rather than call.**"
msgstr ""

#: featurebox.utils.quickmethod.dict_method_clf:1 of
msgid "many clf method."
msgstr ""

#: featurebox.utils.quickmethod.dict_method_reg:1 of
msgid "many reg method."
msgstr ""

#: featurebox.utils.quickmethod.method_pack:1 of
msgid "return cv or gd."
msgstr ""

#~ msgid "Define several typing for convenient use"
#~ msgstr ""

#~ msgid "featurebox.utils.look\\_json module"
#~ msgstr ""

#~ msgid ""
#~ "This part is used to add as_json"
#~ " and to_json method for Externally "
#~ "class. In default, for one case, "
#~ "we add by inherit monty.json.MSONable. "
#~ "but for large mount cases, it "
#~ "rewrite a lot of things. This is"
#~ " a dynamic approach, For a small "
#~ "amount of work, we don't recommend "
#~ "it."
#~ msgstr ""

#~ msgid "Examples"
#~ msgstr ""

#~ msgid "#In definition code."
#~ msgstr ""

#~ msgid "# Usage code"
#~ msgstr ""

#~ msgid "The new class are marked with \"_D\""
#~ msgstr ""

#~ msgid "Bases: :class:`json.encoder.JSONEncoder`"
#~ msgstr ""

#~ msgid ""
#~ "A Json Encoder which supports the "
#~ "MSONable API, plus adds support for "
#~ "numpy arrays, datetime objects, bson "
#~ "ObjectIds (requires bson)."
#~ msgstr ""

#~ msgid "Usage::"
#~ msgstr ""

#~ msgid "Constructor for JSONEncoder, with sensible defaults."
#~ msgstr ""

#~ msgid ""
#~ "If skipkeys is false, then it is"
#~ " a TypeError to attempt encoding of"
#~ " keys that are not str, int, "
#~ "float or None.  If skipkeys is "
#~ "True, such items are simply skipped."
#~ msgstr ""

#~ msgid ""
#~ "If ensure_ascii is true, the output "
#~ "is guaranteed to be str objects "
#~ "with all incoming non-ASCII characters"
#~ " escaped.  If ensure_ascii is false, "
#~ "the output can contain non-ASCII "
#~ "characters."
#~ msgstr ""

#~ msgid ""
#~ "If check_circular is true, then lists,"
#~ " dicts, and custom encoded objects "
#~ "will be checked for circular references"
#~ " during encoding to prevent an "
#~ "infinite recursion (which would cause an"
#~ " OverflowError). Otherwise, no such check"
#~ " takes place."
#~ msgstr ""

#~ msgid ""
#~ "If allow_nan is true, then NaN, "
#~ "Infinity, and -Infinity will be encoded"
#~ " as such.  This behavior is not "
#~ "JSON specification compliant, but is "
#~ "consistent with most JavaScript based "
#~ "encoders and decoders. Otherwise, it "
#~ "will be a ValueError to encode "
#~ "such floats."
#~ msgstr ""

#~ msgid ""
#~ "If sort_keys is true, then the "
#~ "output of dictionaries will be sorted"
#~ " by key; this is useful for "
#~ "regression tests to ensure that JSON "
#~ "serializations can be compared on a "
#~ "day-to-day basis."
#~ msgstr ""

#~ msgid ""
#~ "If indent is a non-negative "
#~ "integer, then JSON array elements and"
#~ " object members will be pretty-"
#~ "printed with that indent level.  An "
#~ "indent level of 0 will only insert"
#~ " newlines. None is the most compact"
#~ " representation."
#~ msgstr ""

#~ msgid ""
#~ "If specified, separators should be an"
#~ " (item_separator, key_separator) tuple.  The "
#~ "default is (', ', ': ') if "
#~ "*indent* is ``None`` and (',', ': "
#~ "') otherwise.  To get the most "
#~ "compact JSON representation, you should "
#~ "specify (',', ':') to eliminate "
#~ "whitespace."
#~ msgstr ""

#~ msgid ""
#~ "If specified, default is a function "
#~ "that gets called for objects that "
#~ "can't otherwise be serialized.  It "
#~ "should return a JSON encodable version"
#~ " of the object or raise a "
#~ "``TypeError``."
#~ msgstr ""

#~ msgid ""
#~ "Implement this method in a subclass "
#~ "such that it returns a serializable "
#~ "object for ``o``, or calls the "
#~ "base implementation (to raise a "
#~ "``TypeError``)."
#~ msgstr ""

#~ msgid ""
#~ "For example, to support arbitrary "
#~ "iterators, you could implement default "
#~ "like this::"
#~ msgstr ""

#~ msgid "A JSON serializable dict representation of an object."
#~ msgstr ""

#~ msgid ""
#~ "Just call values in NNict by,consider"
#~ " multiple cases at the same time. "
#~ "[\"VoronoiNN\", VoronoiNN, VoronoiNN(), "
#~ "\"VoronoiNN_D\", VoronoiNN_D, VoronoiNN_D(),] All"
#~ " map VoronoiNN_D() or VoronoiNN_D."
#~ msgstr ""

#~ msgid "# In definition code. # NNDict = mark_classes([VoronoiNN,CutOffDictNN])"
#~ msgstr ""

#~ msgid "for i, j in NNDict.items():"
#~ msgstr ""

#~ msgid "locals()[i] = j"
#~ msgstr ""

#~ msgid "# Usage code # vor = get_marked_class(\"VoronoiNN\", NNDict)"
#~ msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid "str or class in NNDict."
#~ msgstr ""

#~ msgid "dict of pre-definition, {\"classname_D\": class}."
#~ msgstr ""

#~ msgid "return class of object."
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr ""

#~ msgid "object or class in NNDict."
#~ msgstr ""

#~ msgid "Return type"
#~ msgstr ""

#~ msgid "Batch add as_json and to_json method for Externally class."
#~ msgstr ""

#~ msgid "NNDict = mark_classes([VoronoiNN,CutOffDictNN])"
#~ msgstr ""

#~ msgid "not object."
#~ msgstr ""

#~ msgid ""
#~ "key is the class name with append"
#~ " \"_D\", and values is the new "
#~ "class with `as_json` method."
#~ msgstr ""

#~ msgid "Returns a json string representation of the MSONable object."
#~ msgstr ""

